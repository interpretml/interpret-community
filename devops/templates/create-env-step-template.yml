# install needed packages
parameters:
- name: pythonVersion
  type: string
- name: envInfoArtifact
  type: string
- name: envInfoFileBase
  type: string
- name: envInfoDirectory
  type: string
  default: environmentInfo
- name: condaEnv
  type: string
  default: interpret_conda_env

steps:
  - bash: conda create --yes --quiet --name ${{parameters.condaEnv}} python=${{parameters.pythonVersion}}
    displayName: Create Anaconda environment

  - bash: |
      source activate ${{parameters.condaEnv}}
      conda install --yes --quiet --name  ${{parameters.condaEnv}} "numpy<1.24.0" -c conda-forge
      conda install --yes --quiet --name  ${{parameters.condaEnv}} pytorch torchvision cpuonly -c pytorch
    displayName: Install Anaconda packages
    condition:  ne(variables['Agent.OS'], 'Darwin')

  - bash: |
      source activate ${{parameters.condaEnv}}
      conda install --yes --quiet --name  ${{parameters.condaEnv}} "numpy<1.24.0" -c conda-forge
      conda install --yes --quiet --name  ${{parameters.condaEnv}} pytorch torchvision -c pytorch
    displayName: Install Anaconda packages on MacOS, which should not include cpuonly according to official docs
    condition:  eq(variables['Agent.OS'], 'Darwin')

  - bash: |
      source activate  ${{parameters.condaEnv}}
      conda install --yes -c conda-forge lightgbm
    displayName: Install lightgbm from conda on MacOS
    condition:  eq(variables['Agent.OS'], 'Darwin')

  - bash: |
      source activate ${{parameters.condaEnv}} 
      pip install --upgrade pip
    displayName: Upgrade pip to latest for linux or macos
    condition:  or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))

  - bash: |
      source activate ${{parameters.condaEnv}} 
      python -m pip install --upgrade pip --user
    displayName: Upgrade pip to latest for windows
    condition:  eq(variables['Agent.OS'], 'Windows_NT')

  - bash: |
      source activate  ${{parameters.condaEnv}} 
      pip install --upgrade setuptools
    displayName: Upgrade setuptools to latest

  - bash: |
      source activate  ${{parameters.condaEnv}} 
      pip install -r requirements-test.txt
    displayName: Install test required pip packages

  - bash: |
      source activate  ${{parameters.condaEnv}} 
      pip install -r requirements-dev.txt
    displayName: Install dev required pip packages

  - bash: |
      source activate  ${{parameters.condaEnv}} 
      pip install papermill
      pip install scrapbook
    displayName: List Jupyter Kernel and fix

  - bash: mkdir ${{parameters.envInfoDirectory}}
    displayName: Create directory for environment info

  - bash: |
        source activate ${{parameters.condaEnv}}
        pip freeze --all > ${{parameters.envInfoFileBase}}-pip.txt
    displayName: "Gather environment information"
    workingDirectory: '$(System.DefaultWorkingDirectory)/${{parameters.envInfoDirectory}}'

  - bash: |
        source activate  ${{parameters.condaEnv}}
        conda list > ${{parameters.envInfoFileBase}}-conda.txt
    displayName: Save conda info for linux or macos
    condition:  or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))

  - task: PublishPipelineArtifact@1
    displayName: "Publish environment info to artifact ${{parameters.envInfoArtifact}}"
    inputs:
      path: '$(System.DefaultWorkingDirectory)/${{parameters.envInfoDirectory}}'
      artifact: '${{parameters.envInfoArtifact}}-Attempt-$(System.JobAttempt)'
