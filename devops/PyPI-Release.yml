# Simplified PyPI release pipeline

# At queue time, the user selects a Test or Production deployment. The following stages
# then run:
# - Predeployment validation (run a set of tests against the repository)
# - Creates a wheel and stores in Pipeline Artifact
# - Download wheel file from Artifact, pip install, and run tests
# - Upload the wheel to PyPI (Test or Production as specified at queue time)
# - Install from PyPI and run tests

parameters:
- name: releaseType
  displayName: Release Type
  type: string
  default: Test
  values:
  - Test
  - Production

variables:
  poolImage: "ubuntu-latest"
  poolPythonVersion: 3.6
  packageArtifactName: Wheels
  versionArtifactName: Version
  versionFileName: versionInfo.txt

trigger: none # No CI build

pr: none # Not for pull requests

# ==================================================================================================

stages:
- stage: PredeploymentValidation
  displayName: Predeployment Validation
  pool:
    vmImage: $(poolImage)

  variables:
    envInfoArtifact: PredeployFreeze
    envInfoFileBase: predeploy-requirements

  jobs:
  - template: templates/all-tests-job-template.yml
    parameters:
      platforms:  { Linux: ubuntu-latest, MacOS: macos-latest, Windows: windows-latest }
      pyVersions: [3.6, 3.7]
      installationType: PipLocal
      envArtifactStem: $(envInfoArtifact)
      envFileStem: $(envInfoFileBase)

# ==================================================================================================

- stage: CreateWheel
  displayName: Create Wheel Artifact
  dependsOn: PredeploymentValidation
  pool:
    vmImage: $(poolImage)

  variables:
    wheelEnvName: WheelEnvironment
    freezeArtifactName: CreateWheelFreeze
    freezeFile: createwheel-freeze

  jobs:
  - job: CreateWheel
    displayName: Build and publish wheel
    pool:
      vmImage: $(poolImage)
    
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(poolPythonVersion)'
      inputs:
        versionSpec: $(poolPythonVersion)
        addToPath: true

    
    - template: templates/create-env-step-template.yml
      parameters:
        pythonVersion: $(poolPythonVersion)
        envInfoArtifact: $(freezeArtifactName)
        envInfoFileBase: $(freezeFile)
        condaEnv: $(wheelEnvName)

    - bash: |
        source activate $(wheelEnvName)
        pip install --upgrade wheel 
      displayName: 'Install wheel'

    - bash: |
        source activate $(wheelEnvName)
        python ./tools/build_wheels.py --version-filename $(versionFilename) 
      displayName: 'Build wheels'

    - task: PublishPipelineArtifact@1
      displayName: "Publish wheels"
      inputs:
        path: $(System.DefaultWorkingDirectory)/python/dist
        artifact: $(packageArtifactName)

    - task: PublishPipelineArtifact@1
      displayName: "Publish version information file"
      inputs:
        path: '$(System.DefaultWorkingDirectory)/$(versionFilename)'
        artifact: $(versionArtifactName)
