name: CI Python

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  ci-python:
    strategy:
      matrix:
        packageDirectory: ["interpret_community"]
        operatingSystem: [ubuntu-latest]
        pythonVersion: [3.6, 3.8]

    runs-on: ${{ matrix.operatingSystem }}

    steps:
    - uses: actions/checkout@v2
    - uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: ${{ matrix.pythonVersion }}
    - if: ${{ matrix.operatingSystem == 'macos-latest' }}
      name: Use Homebrew to install libomp on MacOS
      shell: bash -l {0}
      run: |
        brew install libomp
    - if: ${{ matrix.operatingSystem != 'macos-latest' }}
      name: Install pytorch on non-MacOS
      shell: bash -l {0}
      run: |
        conda install --yes --quiet pytorch torchvision captum cpuonly -c pytorch
    - if: ${{ matrix.operatingSystem == 'macos-latest' }}
      name: Install Anaconda packages on MacOS, which should not include cpuonly according to official docs
      shell: bash -l {0}
      run: |
        conda install --yes --quiet pytorch torchvision captum -c pytorch
    - if: ${{ matrix.operatingSystem == 'macos-latest' }}
      name: Install lightgbm from conda on MacOS
      shell: bash -l {0}
      run: |
        conda install --yes -c conda-forge lightgbm
    - name: Install package
      shell: bash -l {0}
      run: |
        pip install -e ./python
    - name: Install main dependencies
      shell: bash -l {0}
      run: |
        pip install -r requirements.txt
    - name: Install dev dependencies
      shell: bash -l {0}
      run: |
        pip install -r requirements-dev.txt
    - name: Install visualization dependencies
      shell: bash -l {0}
      run: |
        pip install -r requirements-vis.txt
    - name: Install test dependencies
      shell: bash -l {0}
      run: |
        pip install -r requirements-test.txt
    - name: Test with pytest
      shell: bash -l {0}
      run: |
        pytest ./tests -m "not notebooks" -s -v --cov=${{ matrix.packageDirectory }} --cov-report=xml --cov-report=html
    - name: Upload code coverage results
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.packageDirectory }}-code-coverage-results
        path: htmlcov
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: .
        env_vars: OS,PYTHON
        fail_ci_if_error: true
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        path_to_write_report: ./coverage/codecov_report.txt
        verbose: true
